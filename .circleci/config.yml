version: 2.1
orbs:
  docker: circleci/docker@2.0.1
  kubernetes: circleci/kubernetes@0.12.0
  aws-eks: circleci/aws-eks@0.2.3

jobs:

  lint-app:
    docker:
      - image: python:3.7.3-stretch
    working_directory: ~/repo
    steps:
      - checkout
      - run:
          name: install dependencies
          command: |
            make install
      - run:
          name: run lint
          command: |
            make lint

  build-push-images:
    executor: docker/docker
    steps:
      - setup_remote_docker
      - checkout
      - docker/check
      - docker/build:
          image: alexcgdocker/my-capstone-site
          tag: "1.2"
      - docker/push:
          digest-path: /tmp/digest.txt
          image: alexcgdocker/my-capstone-site
          tag: "1.2"
      - run:
          command: |
            echo "Digest is: $(</tmp/digest.txt)"

  test-cluster:
    executor: aws-eks/python3
    parameters:
      cluster-name:
        description: |
          Name of the EKS cluster
        type: string
    steps:
      - kubernetes/install
      - aws-eks/update-kubeconfig-with-authenticator:
          cluster-name: << parameters.cluster-name >>
      - run:
          name: Kube cluster
          command: |
            kubectl get services

  run-deployment:
    executor: aws-eks/python3
    parameters:
      cluster-name:
        description: |
          Name of the EKS cluster
        type: string
    steps:
      - checkout
      - aws-eks/update-kubeconfig-with-authenticator:
          cluster-name: << parameters.cluster-name >>
          install-kubectl: true
      - kubernetes/create-or-update-resource:
          get-rollout-status: true
          resource-file-path: deployment.yml
          resource-name: deployment/capstone-site

  test-deployment:
    executor: aws-eks/python3
    parameters:
      cluster-name:
        description: |
          Name of the EKS cluster
        type: string
    steps:
      - kubernetes/install
      - aws-eks/update-kubeconfig-with-authenticator:
          cluster-name: << parameters.cluster-name >>
      - run:
          name: Kube cluster
          command: |
            kubectl get svc
            kubectl get nodes
            kubectl get deployment

  # create-eks-cluster:
  #   executor: aws-eks/python3
  #   parameters:
  #     cluster-name:
  #       description: |
  #         Name of the EKS cluster
  #       type: string
  #   steps:
  #     - checkout
  #     - aws-eks/install-aws-iam-authenticator:
  #         release-tag: ''
  #     - run:
  #         name: Install the eksctl tool
  #         command: |
  #           if which eksctl > /dev/null; then
  #           echo "eksctl is already installed"
  #           exit 0
  #           fi
  #           mkdir -p eksctl_download
  #           curl --silent --location --retry 5 "https://github.com/weaveworks/eksctl/releases/latest/download/eksctl_$(uname -s)_amd64.tar.gz" | tar xz -C eksctl_download
  #           chmod +x eksctl_download/eksctl
  #           SUDO=""
  #           if [ $(id -u) -ne 0 ] && which sudo > /dev/null ; then
  #           SUDO="sudo"
  #           fi
  #           $SUDO mv eksctl_download/eksctl /usr/local/bin/
  #           rmdir eksctl_download
  #     - aws-eks/create-cluster:
  #         cluster-name: << parameters.cluster-name >>
  #         skip-kubectl-install: false
  #         verbose: 3
  #         node-type: t2.small
  #         nodes-max: 2
  #         ssh-access: false
  #         ssh-public-key: ''

  # test-eks-cluster:
  #   executor: aws-eks/python3
  #   parameters:
  #     cluster-name:
  #       description: |
  #         Name of the EKS cluster
  #       type: string
  #   steps:
  #     - kubernetes/install
  #     - aws-eks/update-kubeconfig-with-authenticator:
  #         cluster-name: << parameters.cluster-name >>
  #     - run:
  #         name: Kube cluster
  #         command: |
  #           kubectl get services

workflows:
  default:
    jobs:
      - lint-app
      - build-push-images:
          requires: [lint-app]
      - test-cluster:
          cluster-name: eks-capstone-project
          requires: [build-push-images]
      - run-deployment:
          cluster-name: eks-capstone-project
          requires: [test-cluster]
      - test-deployment:
          cluster-name: eks-capstone-project
          requires: [run-deployment]
  # deployment:
  #   jobs:
  #     - create-eks-cluster:
  #         cluster-name: eks-capstone-project
  #     - test-eks-cluster:
  #         cluster-name: eks-capstone-project
  #         requires: [create-eks-cluster]
  #     - aws-eks/delete-cluster:
  #         cluster-name: eks-capstone-project
  #         requires: [test-eks-cluster]
